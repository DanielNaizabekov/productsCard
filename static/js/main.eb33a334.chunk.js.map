{"version":3,"sources":["assets/imgs/cat.png","components/ProductCard/ProductCard.js","views/Products/Products.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProductCard","className","product","children","background","onToggleSelect","useState","isSelected","setIsSelected","useEffect","productId","id","layoutColor","caption","isEnded","accentBadge","badge","getClickableTemplate","replaceText","style","color","borderColor","onClick","fullText","accentText","replace","cutAccentText","dangerouslySetInnerHTML","text","capitalizeText","toUpperCase","substr","toLowerCase","__html","findClickableText","event","persist","target","products","subtitle","title","accentTitle","descriptions","img","cat","Products","selectedProductsId","setSelectedProductsId","ProductLayout","map","desc","key","newSelectedProductsId","productIndex","indexOf","splice","push","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb33a334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.17741b29.png\";","import React, { useState, useEffect } from 'react';\r\nimport './ProductCard.css';\r\n\r\nfunction ProductCard({ className, product, children, background = '#F2F2F2', onToggleSelect }) {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n  useEffect(() => onToggleSelect({isSelected, productId: product.id}) , [isSelected]);\r\n\r\n  const {\r\n    layoutColor = '#B3B3B3',\r\n    caption,\r\n    isEnded,\r\n    accentBadge,\r\n    badge,\r\n  } = product;\r\n\r\n  const cutAccentText = ({ fullText, accentText }) => {\r\n    return fullText.replace(accentText, '');\r\n  };\r\n\r\n  const CLICKABLE_TEXT = 'купи';\r\n  const getClickableTemplate = replaceText => `\r\n    <span style=\"color: ${layoutColor};\" class=\"product-card-desc-clickable\">${ replaceText }</span>\r\n  `;\r\n  const findClickableText = text => {\r\n    const capitalizeText = CLICKABLE_TEXT[0].toUpperCase() + CLICKABLE_TEXT.substr(1).toLowerCase();\r\n\r\n    let replacedLowerText = text.replace(CLICKABLE_TEXT, getClickableTemplate(CLICKABLE_TEXT));\r\n    let replacedUpperText = replacedLowerText.replace(capitalizeText, getClickableTemplate(capitalizeText))\r\n    return { __html: replacedUpperText };\r\n  };\r\n\r\n  const descClickHandler = event => {\r\n    event.persist();\r\n    if(event.target.className !== 'product-card-desc-clickable') return;\r\n    setIsSelected(!isSelected);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        `product-card-wrap ${className} ${isEnded ? 'disabled' : ''} ${isSelected ? 'selected' : ''}`\r\n      }\r\n      style={{ color: layoutColor }}\r\n    >\r\n      <div\r\n        className=\"product-card\"\r\n        style={{ borderColor: layoutColor }}\r\n        onClick={() => setIsSelected(!isSelected)}\r\n      >\r\n        <span className=\"top-border\" style={{ background }}/>\r\n        <span className=\"left-border\" style={{ background }}/>\r\n        <span className=\"top-right-corner\" />\r\n        <span className=\"bottom-left-corner\" />\r\n\r\n        <div className=\"product-card-body\">\r\n          {children}\r\n\r\n          <div style={{ background: layoutColor }} className=\"product-card-badge\">\r\n            <p className=\"product-card-badge-accent\">{ accentBadge }</p>\r\n              <span>{ cutAccentText({ fullText: badge, accentText: accentBadge }) }</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <p\r\n        className=\"product-card-desc\"\r\n        dangerouslySetInnerHTML={findClickableText(caption)}\r\n        onClick={descClickHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductCard;","import React, { useState, useEffect } from 'react';\r\nimport './Products.css';\r\nimport ProductCard from '../../components/ProductCard/ProductCard';\r\nimport cat from '../../assets/imgs/cat.png';\r\n\r\nconst products = [\r\n  {\r\n    subtitle: 'Сказочное заморское яство',\r\n    title: 'Нямушка с фуа-гра',\r\n    accentTitle: 'Нямушка',\r\n    descriptions: ['10 порций', 'мышь в подарок'],\r\n    img: cat,\r\n    badge: '0,5 кг',\r\n    accentBadge: '0,5',\r\n    caption: 'Чего сидишь? Порадуй котэ, купи.',\r\n    layoutColor: '#1698D9',\r\n    id: '1',\r\n  },\r\n  {\r\n    subtitle: 'Сказочное заморское яство',\r\n    title: 'Нямушка с рыбой',\r\n    accentTitle: 'Нямушка',\r\n    descriptions: ['40 порций', '2 мыши в подарок'],\r\n    img: cat,\r\n    badge: '2 кг',\r\n    accentBadge: '2',\r\n    caption: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\r\n    layoutColor: '#D91667',\r\n    id: '2',\r\n  },\r\n  {\r\n    subtitle: 'Сказочное заморское яство',\r\n    title: 'Нямушка с курой',\r\n    accentTitle: 'Нямушка',\r\n    descriptions: ['100 порций', '5 мышей в подарок', 'заказчик доволен'],\r\n    img: cat,\r\n    badge: '5 кг',\r\n    accentBadge: '5',\r\n    caption: 'Печалька, с курой закончился.',\r\n    layoutColor: '#FFFF66',\r\n    id: '3',\r\n    isEnded: true,\r\n  },\r\n];\r\n\r\nfunction Products() {\r\n  const [selectedProductsId, setSelectedProductsId] = useState([]);\r\n\r\n  const ProductLayout = ({ product }) => {\r\n    const cutAccentText = ({ fullText, accentText }) => {\r\n      return fullText.replace(accentText, '');\r\n    };\r\n\r\n    return (\r\n      <div className=\"product-layout\">\r\n        <div className=\"product-layout-top\">\r\n          <p className=\"product-layout-subtitle\">{ product.subtitle }</p>\r\n          <h3 className=\"product-layout-title\">\r\n            <span className=\"product-layout-title-accent\">{ product.accentTitle }</span>\r\n            { cutAccentText({ fullText: product.title, accentText: product.accentTitle }) }\r\n          </h3>\r\n          <div className=\"product-layout-desc\">\r\n            {product.descriptions.map(desc => <p key={desc}>{ desc }</p>)}\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ background: `url(${product.img})` }} className=\"product-layout-bottom\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onToggleSelect = ({ isSelected, productId }) => {\r\n    let newSelectedProductsId = [...selectedProductsId];\r\n    const productIndex = newSelectedProductsId.indexOf(productId);\r\n    if(productIndex > -1) newSelectedProductsId.splice(productIndex, 1);\r\n    else if(isSelected) newSelectedProductsId.push(productId);\r\n    setSelectedProductsId(newSelectedProductsId);\r\n  };\r\n  useEffect(() => console.log(selectedProductsId), [selectedProductsId]);\r\n\r\n  return (\r\n    <div className=\"products\">\r\n      <div className=\"products-body\">\r\n        <h2 className=\"products-body-title title\">Ты сегодня покормил кота?</h2>\r\n\r\n        <div className=\"products-list\">\r\n          {products.map(product => (\r\n            <ProductCard\r\n              className=\"products-item\"\r\n              key={product.id}\r\n              product={product}\r\n              onToggleSelect={onToggleSelect}\r\n            >\r\n              <ProductLayout product={product}/>\r\n            </ProductCard>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Products;","import React from 'react';\nimport './App.css';\nimport Products from './views/Products/Products';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Products />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}